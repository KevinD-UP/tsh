#### Le format des archives tar

Il existe plusieurs variantes de `tar`, elles-mêmes avec un certain nombre d'extensions possibles. Ce qui suit devrait suffire à pouvoir lire la plupart des fichiers `.tar`, et à écrire des `.tar` acceptés par la plupart des utilitaires `tar`.

Un fichier `tar` est une suite de blocs de 512 octets. S'il représente une archive des fichiers `f1`, ..., `fn`, alors ce fichier `tar` comporte, dans l'ordre :
 
  - un bloc entête pour `f1`
  - les blocs correspondant au contenu de `f1`
  - ...
  - un bloc entête pour `fn`
  - les blocs correspondant au contenu de `fn`
  - deux blocs finaux formés uniquement de zéros

Si la taille d'un des fichiers archivés `fi` n'est pas un multiple de 512, alors le dernier bloc concernant `fi` est complété avec des octets nuls `'\0'` à hauteur de 512 octets. 

Un bloc entête a une structure décrite par le type `struct posix_header` dans le fichier [tar.h](tar.h) fourni. Notez que cette structure fait exactement 512 octets de long (macro `BLOCKSIZE`), afin de correspondre exactement à la lecture (ou à l'écriture) d'un bloc. Voici quelques mots sur les principaux champs, les autres pouvant être ignorés ici :

  - `char name[100]` : nom long du fichier (_ie_ sa référence relative au point d'archivage). On supposera ici que 100 caractères suffisent pour stocker ce nom. Les caractères inutilisés seront mis à `'\0'`.
  
  - `char mode[8]` : permissions du fichier, converties en entier. Comme pour tous les autres champs numériques de l'entête, le dernier caractère est un `'\0'`, et les autres des caractères-chiffres entre `'0'` et `'7'` représentant un entier en octal. Comme vous ne savez pas encore manipuler les droits d'un fichier, ce champ sera ignoré à la lecture, et à l'écriture il sera rempli arbitrairement par `sprintf(hd.mode,"0000700")`.
  
  - `char size[12]` : taille du fichier. Même remarque que précédemment concernant le codage de ce nombre, mais cette fois sur 12 caractères au lieu de 8. La lecture pourra se faire par `sscanf(hd.size,"%o",...)` et l'écriture par `sprintf(hd.size,"%011o",...)`.
  
  - `char chksum[8]` : empreinte ("checksum") de ce bloc entête. À la lecture, vous pouvez l'ignorer. En revanche, pour fabriquer un `tar` acceptable par GNU `tar` ce champ doit être correct. Pour cela, utiliser la fonction fournie `set_checksum()` de `tar.h` une fois que votre entête est prête. Pour plus de détail, voir le commentaire devant `set_checksum()`.

  - `char typeflag` : il vaut `'0'` pour un fichier standard et `'5'`pour un répertoire. À l'extraction, il faudra donc ignorer les fichiers ayant un autre type.
 
 - `char magic[6]` : pour le format de `tar` que l'on utilise ici, ce champ devra être mis à `"ustar"` (vous pouvez utiliser la macro `TMAGIC` définie dans `tar.h` et valant `"ustar"`), et le champ suivant `version` être à `"00"` (sans terminateur).
